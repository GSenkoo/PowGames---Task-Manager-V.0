import discord
import function.data as data_manager
from discord.ext import commands


roles_menu = [
    discord.SelectOption(
        label = "Scripter",
        emoji = "üìú",
        description = "Construit la logique des jeux",
        value = "scripter"
    ),
    discord.SelectOption(
        label = "Mod√©lisateur",
        emoji = "üé®",
        description = "Cr√©e les objets 3D",
        value = "modeler"
    ),
    discord.SelectOption(
        label = "Animateur",
        emoji = "üé¨",
        description = "Anime les personnages",
        value = "animator"
    ),
    discord.SelectOption(
        label = "Builder",
        emoji = "üî®",
        description = "Construit les mondes",
        value = "builder"
    ),
    discord.SelectOption(
        label = "VFX Maker",
        emoji = "üí•",
        description = "Cr√©e les effets sp√©ciaux.",
        value = "vfx"
    ),
    discord.SelectOption(
        label = "SFX Maker",
        emoji = "üîä",
        description = "Cr√©e les effets sonnores.",
        value = "sfx"
    ),
    discord.SelectOption(
        label = "Graphiste",
        emoji = "üìê",
        description = "Cr√©e des images pour le jeu.",
        value = "graphic_designer"
    ),
    discord.SelectOption(
        label = "Staff Discord",
        emoji = "üõ°Ô∏è",
        description = "G√®re le serveur discord.",
        value = "discord_staff"
    ),
    discord.SelectOption(
        label = "Autres r√¥les",
        emoji = "üí´",
        description = "G√®re d'autres t√¢ches.",
        value = "others"
    )
]


class TaskModal(discord.ui.Modal):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

        self.add_item(discord.ui.InputText(label="Titre de la t√¢che", min_length = 3, max_length = 25))
        self.add_item(discord.ui.InputText(label="Description de la t√¢che", style = discord.InputTextStyle.long, min_length = 3, max_length = 1250))
        self.add_item(discord.ui.InputText(label = "Points", min_length = 1, max_length = 4, placeholder = "Entre 0 et 1000"))
        self.add_item(discord.ui.InputText(label = "Nombre d'utilisateur maximum", min_length = 1, max_length = 100, placeholder = "Entre 1 et 100"))

    async def callback(self, interaction: discord.Interaction):
        tasks = data_manager.get_data("db", "tasks")
            
        if "/" in self.children[0].value:
            await interaction.response.send_message("Vous ne pouvez pas mettre de \"/\" dans le nom de la t√¢che, contrainte impos√© par la base de donn√©e.", ephemeral = True)
            return
        
        for task_name in tasks.keys():
            if task_name == self.children[0].value:
                await interaction.response.send_message("Ce nom de t√¢che √©xiste d√©j√†.", ephemeral = True)
                return

        if not self.children[2].value.isdigit():
            await interaction.response.send_message("Nombre de points invalide, le nombre donn√© est invalide.", ephemeral = True)
            return
        
        if not 0 <= int(self.children[2].value) <= 1000:
            await interaction.response.send_message("Nombre de points invalide, le nombre doit √™tre entre 0 (inclu) et 100 (inclu).", ephemeral = True)
            return
        
        if not self.children[3].value.isdigit():
            await interaction.response.send_message("Nombre d'utilisateur maximum pour la t√¢che invalide, vous devez mettre un nombre.", ephemeral = True)
            return
        
        if not 1 <= int(self.children[3].value) <= 100:
            await interaction.response.send_message("Nombre d'utilisateur maximum pour la t√¢che invalide, vous devez mettre un nombre entre 1 (inclu) et 100 (inclu).", ephemeral = True)
            return


        data = {
            "name": self.children[0].value,
            "description": self.children[1].value,
            "points": int(self.children[2].value),
            "roles_allowed": [],
            "max_users_count": int(self.children[3].value),
            "made_by": interaction.user.id
        }
        
        modal_interaction = interaction
        class ChooseAllowedRoles(discord.ui.View):
            @discord.ui.select(
                placeholder = "Choisir un/des r√¥le(s)",
                min_values = 1,
                max_values = len(roles_menu),
                options = roles_menu
            )
            async def select_callback(self, select, interaction):
                if interaction.user.id != modal_interaction.user.id:
                    await interaction.respond("Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                    return
                
                tasks = data_manager.get_data("db", "tasks")

                for task_name in tasks.keys():
                    if task_name == data["name"]:
                        await interaction.message.edit("Entre temps, on dirait bien qu'une t√¢che avec le m√™me nom a √©t√© cr√©√©e.", view = None, embed = None)
                        return
                
                data["roles_allowed"] = select.values
                data_manager.set_data("db", f"tasks/{data['name']}", data)

                await interaction.message.edit(f"La t√¢che **{data['name']}** a √©t√© cr√©√©e avec succ√®s.", view = None, embed = None)

                try:
                    logs_channel = await interaction.guild.fetch_channel(logs_channel)
                    await logs_channel.send(embed = discord.Embed(description = f"<@{interaction.user.id}> vient de cr√©er la t√¢che **{data['name']}**.", color = 0xFFFFFF))
                except:
                    pass

            
        await interaction.response.send_message(
            embed = discord.Embed(
                title = "Choisissez les r√¥les concern√©s.",
                color = 0xFFFFFF
            ),
            view = ChooseAllowedRoles()
        )

class task_create_Command(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @discord.slash_command(description = "Cr√©er une t√¢che")
    @discord.guild_only()
    async def task_create(self, ctx):
        if ctx.author.id not in data_manager.get_data("config", "admins"):
            await ctx.respond("Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
            return
        
        await ctx.send_modal(TaskModal(title = "Task Manager"))


def setup(bot):
    bot.add_cog(task_create_Command(bot))